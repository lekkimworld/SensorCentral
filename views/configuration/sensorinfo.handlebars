<a href="/configuration/house/{{houseId}}/{{deviceId}}">Back to sensors</a>
<div class="row">
    <div class="col-10">
        <h3>Sensor: {{sensorName}}</h3>
    </div>
    <div class="col-2" id="action-icons">
        <i class="fa fa-plus fa-2x" aria-hidden="true" rel="add"></i>
    </div>
</div>

<h5>Last Reading</h5>
{{#if reading}}
{{reading.value_string}}, {{reading.ageMinutes}} min. siden
{{else}}
No reading found for sensor
{{/if}}

<h5 class="mt-4">Graph</h5>
<canvas id="myChart" width="650px" height="250px"></canvas>

<h5 class="mt-4">Export</h5>
<div class="name"><a href="/api/v1/excel/range/standard/{{sensor.label}}/last24hrs/5m">Export last 24 hrs (5 min resolution)</a></div>
<div class="name"><a href="/api/v1/excel/range/standard/{{sensor.label}}/last24hrs/60m">Export last 24 hrs (1 hrs resolution)</a></div>
<div class="name"><a href="/api/v1/excel/range/standard/{{sensor.label}}/lastweek">Export last week</a></div>

<h5 class="mt-4">Samples</h5>
{{#if samples}}
<i>Showing last {{samples.length}} samples</i>
<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th scope="col">VALUE</th>
            <th scope="col">TIMESTAMP</th>
        </tr>
    </thead>
    <tbody>
        {{#each samples}}
        <tr id="{{this.id}}">
            <th scope="row">{{this.value}}</th>
            <td>{{this.dt_string}}</td>
        </tr>
        {{/each}}
    </tbody>
</table>
{{else}}
No samples to show.
{{/if}}

<div class="modal fade" id="sampleModal" tabindex="-1" role="dialog" aria-labelledby="sampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sampleModalLabel">Create/Edit Sample</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="sampleForm" novalidate>
                    <div class="form-group">
                        <label for="idInput">Sensor ID</label>
                        <input type="text" required class="form-control" id="idInput" aria-describedby="nameHelp">
                    </div>
                    <div class="form-group">
                        <label for="dtInput">Date/time</label>
                        <div class='input-group date' id='datetimepicker1'>
                            <input type='text' class="form-control" />
                            <span class="input-group-addon">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                        <small id="dtHelp" class="form-text text-muted">Specify the sample date/time.</small>
                        <div class="invalid-feedback">
                            You must specify the date/time for the sample.
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="sampleInput">Sample</label>
                        <input type="number" step=".0001" required class="form-control" id="sampleInput" aria-describedby="sampleHelp" placeholder="Enter sample value">
                        <small id="sampleHelp" class="form-text text-muted">Specify the sample value (must be a number).</small>
                        <div class="invalid-feedback">
                            You must specify the sample value for the sensor. Must be a number.
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="save_sample">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    const houseid = "{{houseId}}";
    const deviceid = "{{deviceId}}";
    const sensorid = "{{sensorId}}";
    const sensorname = "{{sensorName}}";
    
    $("tbody").on("click", ev => {
        let elem = ev.target.parentElement;
        let id = elem.id;
        while (!id) {
            elem = elem.parentElement;
            id = elem.id;
        }
    })
    const openForm = function(id, value, dt) {
        $('#datetimepicker1').datetimepicker({
            locale: 'da_dk',
            inline: true,
            sideBySide: true,
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-arrow-up",
                down: "fa fa-arrow-down",
                next: "fa fa-arrow-right",
                previous: "fa fa-arrow-left"
            }
        });

        const idField = $("#idInput");
        const valueField = $("#sampleInput");
        const dtField = $("#dtInput");
        idField.val(id);
        valueField.val(value);
        dtField.val(dt);
        $("#idInput").prop("disabled", true);
        $("#sampleModal").modal("show");
    }
    $("#action-icons").on("click", ev => {
        if (ev.target.getAttribute("rel") === "add") {
            openForm(sensorid);
        }
    })
    
    $("#save_sample").on("click", ev => {
        const form = document.querySelector("#sampleForm");
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return;
        }

        // get field values
        const idField = $("#idInput");
        const valueField = $("#sampleInput");
        const dtField = $('#datetimepicker1');
        let fetchCtx = {
            "body": JSON.stringify({
                "id": idField.val(),
                "value": Number.parseFloat(valueField.val()),
                "deviceId": deviceid,
                "dt": dtField.data("DateTimePicker").date().toISOString()
            }),
            "headers": {
                "Content-Type": "application/json"
            },
            "method": "POST"
        }
        fetch(`/api/v1/data/samples`, fetchCtx).then(res => res.json()).then(body => {
            if (body.hasOwnProperty("error") && body.error) {
                form.classList.add('was-validated');
            } else {
                // clear form and close modal
                form.classList.remove('was-validated');
                $("#sensorModal").modal("hide"); 
                document.location.reload();
            }
        })
    })

    window.addEventListener("DOMContentLoaded", () => {
        const samples = fetch(`/api/v1/data/samples/${sensorid}/800`).then(res => res.json()).then(samples => {
            const arr = samples.reverse().map(sample => {
                return {
                    "x": new Date(sample.dt),
                    "y": sample.value
                }
            })
            const formatDate = d => {
                const m = d.getMonth();
                const month = m===0 ? "jan" : m===1 ? "feb" : m === 2 ? "mar" : "apr";
                return `${d.getDate()} ${month}`;
            }
            const formatTime = d => {
                return `${d.getHours() < 10 ? "0" + d.getHours() : d.getHours()}:${d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes()}`;
            }
            window.SC.doChart({
                "labels": arr.map(d => `${formatDate(d.x)} ${formatTime(d.x)}`),
                "datasets": [{
                    "label": sensorname,
                    "data": arr,
                    "pointRadius": 0,
                    "fill": false,
                    "backgroundColor": 'rgba(0, 100, 255, 0.4)'
                }]}, 
                "line", {
                    "responsive": false
                }
            );
        })
    })
</script>